from builtins import print

from OPC_Managment.Style_BootStrap import Style, Style_Red
from   OPC_Managment import  Setting_server

import pyodbc, re, sys, asyncio, mysql.connector
# from PyQt5.QtGui import *

import pandas as pd
from PyQt5.QtWidgets import QMessageBox , QMainWindow, QWidget, QSplitter, QPushButton, QTextEdit, QSpacerItem, QGroupBox,\
 QFormLayout, QSizePolicy, QFormLayout, QApplication, QLabel, QSpacerItem , QGridLayout ,QLineEdit, QTabWidget, QTableWidget,\
QAbstractItemView, QTableWidgetItem, QScrollArea, QHBoxLayout, QToolButton, QMenuBar, QMenu, QStatusBar, QAction, QFileDialog
from PyQt5.QtCore import Qt, QMetaObject, QCoreApplication, pyqtSlot, QSize, QRect
from PyQt5.QtGui import QPalette, QBrush, QColor, QFont, QPixmap
import yaml
import csv
import os



## connect to database  Tracebility
class  Connect_To_server():
    try:
        with open("config.yaml", "r") as yamlfile:
            data_r = yaml.load(yamlfile, Loader=yaml.FullLoader)




        DB_save = mysql.connector.connect(

            host= data_r[0]['DATA_Setting']['HOST_SERVER'],
            user= data_r[0]['DATA_Setting']['USER_SERVER'],
            password= data_r[0]['DATA_Setting']['PASSWORD_SERVER'],
            database= data_r[0]['DATA_Setting']['DATABASE_SERVER'],


            # password=(f'"{str(Setting_date[2])}"'),
            # database="photon",

            # host="192.168.1.91",
            # user="BPMS",
            # password="P@ssw0rd",
            # database="photon"
        )
    except:
        import sys
        print('no connection')

        # msg = QMessageBox()
        # msg.setIcon(QMessageBox.Critical)
        # msg.setText("ارتباط با دیتابیس  برقرار نشد  ")
        # msg.setWindowTitle("No Conecction")
        # msg.exec_()

##connect to database Sepidar
class MssqlConnection(object):



    try:


        server = '192.168.1.24\CYBERGATESHAHO'
        database = 'Sepidar04'
        username = 'sa'
        password = 'P@ssw0rdshaho123'
        cnxn_2 = pyodbc.connect(
            'DRIVER={ODBC Driver 17 for SQL Server};SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password)
        cursor = cnxn_2.cursor()
            # cursor.execute("SET character_set_connection=utf8mb4;")
    except:
        print("ارتباط با دیتابیس سپیدار برقرار نشد ")

        # msg = QMessageBox()
        # msg.setIcon(QMessageBox.Critical)
        # # msg.setStyle('fusion')
        # msg.setText("ارتباط با دیتابیس سپیدار برقرار نشد  ")
        #
        # msg.setWindowTitle("No Conecction")
        # msg.exec_()

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1278, 795)
        MainWindow.setMaximumSize(QSize(16777215, 16777215))
        MainWindow.setWindowTitle("MainWindow")
        MainWindow.setAutoFillBackground(True)
        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.tabWidget = QTabWidget(self.centralwidget)
        self.tabWidget.setAutoFillBackground(True)
        self.tabWidget.setObjectName("tabWidget")
        self.Admin_Page = QWidget()
        self.Admin_Page.setObjectName("Admin_Page")
        self.gridLayout_2 = QGridLayout(self.Admin_Page)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.splitter_2 = QSplitter(self.Admin_Page)
        self.splitter_2.setOrientation(Qt.Vertical)
        self.splitter_2.setObjectName("splitter_2")
        self.splitter = QSplitter(self.splitter_2)
        self.splitter.setOrientation(Qt.Horizontal)
        self.splitter.setObjectName("splitter")
        self.tableWidget = QTableWidget(self.splitter)
        self.tableWidget.setMouseTracking(True)
        self.tableWidget.setTabletTracking(True)
        self.tableWidget.setContextMenuPolicy(Qt.DefaultContextMenu)
        self.tableWidget.setAcceptDrops(True)
        self.tableWidget.setLayoutDirection(Qt.RightToLeft)
        self.tableWidget.setAutoFillBackground(True)
        self.tableWidget.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
        self.tableWidget.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
        self.tableWidget.setDragEnabled(True)
        self.tableWidget.setDragDropMode(QAbstractItemView.DragDrop)
        self.tableWidget.setDefaultDropAction(Qt.MoveAction)
        self.tableWidget.setAlternatingRowColors(True)
        self.tableWidget.setTextElideMode(Qt.ElideMiddle)
        self.tableWidget.setVerticalScrollMode(QAbstractItemView.ScrollPerPixel)
        self.tableWidget.setHorizontalScrollMode(QAbstractItemView.ScrollPerPixel)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(2)
        self.tableWidget.setRowCount(0)
        item = QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        self.tableWidget.horizontalHeader().setCascadingSectionResizes(False)
        self.tableWidget.horizontalHeader().setSortIndicatorShown(False)
        self.tableWidget.horizontalHeader().setStretchLastSection(False)
        self.tableWidget.verticalHeader().setCascadingSectionResizes(True)
        self.tableWidget.verticalHeader().setSortIndicatorShown(False)
        self.tableWidget.verticalHeader().setStretchLastSection(False)
        self.scrollArea = QScrollArea(self.splitter)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QWidget()
        self.scrollAreaWidgetContents.setGeometry(QRect(0, 0, 280, 575))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.label_2 = QLabel(self.scrollAreaWidgetContents)
        self.label_2.setGeometry(QRect(160, 500, 115, 16))
        font = QFont()
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.lineEdit_3 = QLineEdit(self.scrollAreaWidgetContents)
        self.lineEdit_3.setGeometry(QRect(20, 500, 133, 20))
        self.lineEdit_3.setMaximumSize(QSize(16777215, 40))
        palette = QPalette()
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.WindowText, brush)
        brush = QBrush(QColor(136, 129, 112))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Button, brush)
        brush = QBrush(QColor(204, 194, 168))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Light, brush)
        brush = QBrush(QColor(170, 161, 140))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Midlight, brush)
        brush = QBrush(QColor(68, 64, 56))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Dark, brush)
        brush = QBrush(QColor(91, 86, 74))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Mid, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Text, brush)
        brush = QBrush(QColor(255, 255, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.BrightText, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.ButtonText, brush)
        brush = QBrush(QColor(255, 255, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Base, brush)
        brush = QBrush(QColor(136, 129, 112))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Window, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Shadow, brush)
        brush = QBrush(QColor(195, 192, 183))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.AlternateBase, brush)
        brush = QBrush(QColor(255, 255, 220))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.ToolTipBase, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.ToolTipText, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.WindowText, brush)
        brush = QBrush(QColor(136, 129, 112))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Button, brush)
        brush = QBrush(QColor(204, 194, 168))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Light, brush)
        brush = QBrush(QColor(170, 161, 140))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Midlight, brush)
        brush = QBrush(QColor(68, 64, 56))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Dark, brush)
        brush = QBrush(QColor(91, 86, 74))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Mid, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Text, brush)
        brush = QBrush(QColor(255, 255, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.BrightText, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.ButtonText, brush)
        brush = QBrush(QColor(255, 255, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Base, brush)
        brush = QBrush(QColor(136, 129, 112))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Window, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Shadow, brush)
        brush = QBrush(QColor(195, 192, 183))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.AlternateBase, brush)
        brush = QBrush(QColor(255, 255, 220))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.ToolTipBase, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.ToolTipText, brush)
        brush = QBrush(QColor(68, 64, 56))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.WindowText, brush)
        brush = QBrush(QColor(136, 129, 112))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Button, brush)
        brush = QBrush(QColor(204, 194, 168))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Light, brush)
        brush = QBrush(QColor(170, 161, 140))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Midlight, brush)
        brush = QBrush(QColor(68, 64, 56))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Dark, brush)
        brush = QBrush(QColor(91, 86, 74))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Mid, brush)
        brush = QBrush(QColor(68, 64, 56))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Text, brush)
        brush = QBrush(QColor(255, 255, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.BrightText, brush)
        brush = QBrush(QColor(68, 64, 56))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.ButtonText, brush)
        brush = QBrush(QColor(136, 129, 112))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Base, brush)
        brush = QBrush(QColor(136, 129, 112))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Window, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Shadow, brush)
        brush = QBrush(QColor(136, 129, 112))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.AlternateBase, brush)
        brush = QBrush(QColor(255, 255, 220))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.ToolTipBase, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.ToolTipText, brush)
        self.lineEdit_3.setPalette(palette)
        self.lineEdit_3.setAutoFillBackground(True)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.label = QLabel(self.scrollAreaWidgetContents)
        self.label.setGeometry(QRect(160, 530, 115, 16))
        font = QFont()
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.lineEdit = QLineEdit(self.scrollAreaWidgetContents)
        self.lineEdit.setGeometry(QRect(20, 530, 133, 20))
        self.lineEdit.setMaximumSize(QSize(16777215, 40))
        palette = QPalette()
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.WindowText, brush)
        brush = QBrush(QColor(136, 129, 112))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Button, brush)
        brush = QBrush(QColor(204, 194, 168))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Light, brush)
        brush = QBrush(QColor(170, 161, 140))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Midlight, brush)
        brush = QBrush(QColor(68, 64, 56))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Dark, brush)
        brush = QBrush(QColor(91, 86, 74))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Mid, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Text, brush)
        brush = QBrush(QColor(255, 255, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.BrightText, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.ButtonText, brush)
        brush = QBrush(QColor(255, 255, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Base, brush)
        brush = QBrush(QColor(136, 129, 112))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Window, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Shadow, brush)
        brush = QBrush(QColor(195, 192, 183))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.AlternateBase, brush)
        brush = QBrush(QColor(255, 255, 220))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.ToolTipBase, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.ToolTipText, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.WindowText, brush)
        brush = QBrush(QColor(136, 129, 112))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Button, brush)
        brush = QBrush(QColor(204, 194, 168))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Light, brush)
        brush = QBrush(QColor(170, 161, 140))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Midlight, brush)
        brush = QBrush(QColor(68, 64, 56))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Dark, brush)
        brush = QBrush(QColor(91, 86, 74))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Mid, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Text, brush)
        brush = QBrush(QColor(255, 255, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.BrightText, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.ButtonText, brush)
        brush = QBrush(QColor(255, 255, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Base, brush)
        brush = QBrush(QColor(136, 129, 112))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Window, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Shadow, brush)
        brush = QBrush(QColor(195, 192, 183))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.AlternateBase, brush)
        brush = QBrush(QColor(255, 255, 220))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.ToolTipBase, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.ToolTipText, brush)
        brush = QBrush(QColor(68, 64, 56))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.WindowText, brush)
        brush = QBrush(QColor(136, 129, 112))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Button, brush)
        brush = QBrush(QColor(204, 194, 168))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Light, brush)
        brush = QBrush(QColor(170, 161, 140))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Midlight, brush)
        brush = QBrush(QColor(68, 64, 56))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Dark, brush)
        brush = QBrush(QColor(91, 86, 74))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Mid, brush)
        brush = QBrush(QColor(68, 64, 56))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Text, brush)
        brush = QBrush(QColor(255, 255, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.BrightText, brush)
        brush = QBrush(QColor(68, 64, 56))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.ButtonText, brush)
        brush = QBrush(QColor(136, 129, 112))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Base, brush)
        brush = QBrush(QColor(136, 129, 112))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Window, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Shadow, brush)
        brush = QBrush(QColor(136, 129, 112))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.AlternateBase, brush)
        brush = QBrush(QColor(255, 255, 220))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.ToolTipBase, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.ToolTipText, brush)
        self.lineEdit.setPalette(palette)
        self.lineEdit.setAutoFillBackground(True)
        self.lineEdit.setObjectName("lineEdit")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.tableWidget_2 = QTableWidget(self.splitter)
        self.tableWidget_2.setMouseTracking(True)
        self.tableWidget_2.setTabletTracking(True)
        self.tableWidget_2.setContextMenuPolicy(Qt.DefaultContextMenu)
        self.tableWidget_2.setAcceptDrops(True)
        self.tableWidget_2.setLayoutDirection(Qt.RightToLeft)
        self.tableWidget_2.setAutoFillBackground(True)
        self.tableWidget_2.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
        self.tableWidget_2.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
        self.tableWidget_2.setDragEnabled(True)
        self.tableWidget_2.setDragDropMode(QAbstractItemView.DragDrop)
        self.tableWidget_2.setDefaultDropAction(Qt.MoveAction)
        self.tableWidget_2.setAlternatingRowColors(True)
        self.tableWidget_2.setTextElideMode(Qt.ElideMiddle)
        self.tableWidget_2.setVerticalScrollMode(QAbstractItemView.ScrollPerPixel)
        self.tableWidget_2.setHorizontalScrollMode(QAbstractItemView.ScrollPerPixel)
        self.tableWidget_2.setObjectName("tableWidget_2")
        self.tableWidget_2.setColumnCount(3)
        self.tableWidget_2.setRowCount(0)
        item = QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(0, item)
        item = QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(1, item)
        item = QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(2, item)
        self.tableWidget_2.horizontalHeader().setCascadingSectionResizes(False)
        self.tableWidget_2.horizontalHeader().setSortIndicatorShown(False)
        self.tableWidget_2.horizontalHeader().setStretchLastSection(False)
        self.tableWidget_2.verticalHeader().setCascadingSectionResizes(True)
        self.tableWidget_2.verticalHeader().setSortIndicatorShown(False)
        self.tableWidget_2.verticalHeader().setStretchLastSection(False)
        self.groupBox = QGroupBox(self.splitter_2)
        self.groupBox.setMaximumSize(QSize(16777215, 110))
        self.groupBox.setMouseTracking(True)
        self.groupBox.setTabletTracking(True)
        self.groupBox.setAutoFillBackground(True)
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.gridLayout_3 = QGridLayout(self.groupBox)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.pushButton_4 = QPushButton(self.groupBox)
        self.pushButton_4.setMinimumSize(QSize(0, 50))
        font = QFont()
        font.setBold(False)
        font.setWeight(50)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setMouseTracking(True)
        self.pushButton_4.setTabletTracking(True)
        self.pushButton_4.setAutoFillBackground(True)
        self.pushButton_4.setObjectName("pushButton_4")
        self.gridLayout_3.addWidget(self.pushButton_4, 0, 5, 1, 1)
        self.pushButton_start = QPushButton(self.groupBox)
        self.pushButton_start.setMinimumSize(QSize(0, 50))
        font = QFont()
        font.setBold(False)
        font.setWeight(50)
        self.pushButton_start.setFont(font)
        self.pushButton_start.setMouseTracking(True)
        self.pushButton_start.setTabletTracking(True)
        self.pushButton_start.setAutoFillBackground(True)
        self.pushButton_start.setObjectName("pushButton_start")
        self.gridLayout_3.addWidget(self.pushButton_start, 0, 1, 1, 1)
        self.pushButton_5 = QPushButton(self.groupBox)
        self.pushButton_5.setMinimumSize(QSize(0, 50))
        font = QFont()
        font.setBold(False)
        font.setWeight(50)
        self.pushButton_5.setFont(font)
        self.pushButton_5.setMouseTracking(True)
        self.pushButton_5.setTabletTracking(True)
        self.pushButton_5.setAutoFillBackground(True)
        self.pushButton_5.setStyleSheet("")
        self.pushButton_5.setObjectName("pushButton_5")
        self.gridLayout_3.addWidget(self.pushButton_5, 0, 6, 1, 1)
        self.pushButton_read = QPushButton(self.groupBox)
        self.pushButton_read.setMinimumSize(QSize(0, 50))
        font = QFont()
        font.setBold(False)
        font.setWeight(50)
        self.pushButton_read.setFont(font)
        self.pushButton_read.setMouseTracking(True)
        self.pushButton_read.setAutoFillBackground(True)
        self.pushButton_read.setObjectName("pushButton_read")
        self.gridLayout_3.addWidget(self.pushButton_read, 0, 0, 1, 1)
        self.pushButton_stop = QPushButton(self.groupBox)
        self.pushButton_stop.setMinimumSize(QSize(0, 50))
        font = QFont()
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.pushButton_stop.setFont(font)
        self.pushButton_stop.setMouseTracking(True)
        self.pushButton_stop.setTabletTracking(True)
        self.pushButton_stop.setAutoFillBackground(True)
        self.pushButton_stop.setObjectName("pushButton_stop")
        self.gridLayout_3.addWidget(self.pushButton_stop, 0, 2, 1, 1)
        self.pushButton_start_3 = QPushButton(self.groupBox)
        self.pushButton_start_3.setMinimumSize(QSize(0, 50))
        font = QFont()
        font.setBold(False)
        font.setWeight(50)
        self.pushButton_start_3.setFont(font)
        self.pushButton_start_3.setMouseTracking(True)
        self.pushButton_start_3.setTabletTracking(True)
        self.pushButton_start_3.setAutoFillBackground(True)
        self.pushButton_start_3.setObjectName("pushButton_start_3")
        self.gridLayout_3.addWidget(self.pushButton_start_3, 0, 3, 1, 1)
        self.gridLayout_2.addWidget(self.splitter_2, 0, 0, 1, 1)
        self.tabWidget.addTab(self.Admin_Page, "")
        self.Manage_Opc_Product = QWidget()
        self.Manage_Opc_Product.setObjectName("Manage_Opc_Product")
        self.gridLayout_4 = QGridLayout(self.Manage_Opc_Product)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.label_4 = QLabel(self.Manage_Opc_Product)
        self.label_4.setAutoFillBackground(True)
        self.label_4.setObjectName("label_4")
        self.gridLayout_4.addWidget(self.label_4, 0, 1, 1, 1)
        self.lineEdit_2 = QLineEdit(self.Manage_Opc_Product)
        palette = QPalette()
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.WindowText, brush)
        brush = QBrush(QColor(160, 162, 163))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Button, brush)
        brush = QBrush(QColor(240, 243, 245))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Light, brush)
        brush = QBrush(QColor(200, 202, 204))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Midlight, brush)
        brush = QBrush(QColor(80, 81, 81))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Dark, brush)
        brush = QBrush(QColor(107, 108, 109))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Mid, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Text, brush)
        brush = QBrush(QColor(255, 255, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.BrightText, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.ButtonText, brush)
        brush = QBrush(QColor(255, 255, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Base, brush)
        brush = QBrush(QColor(160, 162, 163))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Window, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Shadow, brush)
        brush = QBrush(QColor(207, 208, 209))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.AlternateBase, brush)
        brush = QBrush(QColor(255, 255, 220))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.ToolTipBase, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.ToolTipText, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.WindowText, brush)
        brush = QBrush(QColor(160, 162, 163))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Button, brush)
        brush = QBrush(QColor(240, 243, 245))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Light, brush)
        brush = QBrush(QColor(200, 202, 204))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Midlight, brush)
        brush = QBrush(QColor(80, 81, 81))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Dark, brush)
        brush = QBrush(QColor(107, 108, 109))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Mid, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Text, brush)
        brush = QBrush(QColor(255, 255, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.BrightText, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.ButtonText, brush)
        brush = QBrush(QColor(255, 255, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Base, brush)
        brush = QBrush(QColor(160, 162, 163))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Window, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Shadow, brush)
        brush = QBrush(QColor(207, 208, 209))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.AlternateBase, brush)
        brush = QBrush(QColor(255, 255, 220))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.ToolTipBase, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.ToolTipText, brush)
        brush = QBrush(QColor(80, 81, 81))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.WindowText, brush)
        brush = QBrush(QColor(160, 162, 163))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Button, brush)
        brush = QBrush(QColor(240, 243, 245))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Light, brush)
        brush = QBrush(QColor(200, 202, 204))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Midlight, brush)
        brush = QBrush(QColor(80, 81, 81))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Dark, brush)
        brush = QBrush(QColor(107, 108, 109))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Mid, brush)
        brush = QBrush(QColor(80, 81, 81))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Text, brush)
        brush = QBrush(QColor(255, 255, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.BrightText, brush)
        brush = QBrush(QColor(80, 81, 81))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.ButtonText, brush)
        brush = QBrush(QColor(160, 162, 163))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Base, brush)
        brush = QBrush(QColor(160, 162, 163))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Window, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Shadow, brush)
        brush = QBrush(QColor(160, 162, 163))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.AlternateBase, brush)
        brush = QBrush(QColor(255, 255, 220))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.ToolTipBase, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.ToolTipText, brush)
        self.lineEdit_2.setPalette(palette)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.gridLayout_4.addWidget(self.lineEdit_2, 0, 0, 1, 1)
        self.splitter_3 = QSplitter(self.Manage_Opc_Product)
        self.splitter_3.setOrientation(Qt.Vertical)
        self.splitter_3.setObjectName("splitter_3")
        self.groupBox_4 = QGroupBox(self.splitter_3)
        self.groupBox_4.setAutoFillBackground(True)
        self.groupBox_4.setTitle("")
        self.groupBox_4.setObjectName("groupBox_4")
        self.gridLayout_6 = QGridLayout(self.groupBox_4)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.tableWidget_3 = QTableWidget(self.groupBox_4)
        self.tableWidget_3.setMaximumSize(QSize(500, 16777215))
        self.tableWidget_3.setLayoutDirection(Qt.RightToLeft)
        self.tableWidget_3.setAutoFillBackground(True)
        self.tableWidget_3.setDragEnabled(True)
        self.tableWidget_3.setDragDropMode(QAbstractItemView.DragDrop)
        self.tableWidget_3.setDefaultDropAction(Qt.MoveAction)
        self.tableWidget_3.setAlternatingRowColors(True)
        self.tableWidget_3.setVerticalScrollMode(QAbstractItemView.ScrollPerPixel)
        self.tableWidget_3.setHorizontalScrollMode(QAbstractItemView.ScrollPerPixel)
        self.tableWidget_3.setObjectName("tableWidget_3")
        self.tableWidget_3.setColumnCount(3)
        self.tableWidget_3.setRowCount(0)
        item = QTableWidgetItem()
        self.tableWidget_3.setHorizontalHeaderItem(0, item)
        item = QTableWidgetItem()
        self.tableWidget_3.setHorizontalHeaderItem(1, item)
        item = QTableWidgetItem()
        self.tableWidget_3.setHorizontalHeaderItem(2, item)
        self.tableWidget_3.horizontalHeader().setCascadingSectionResizes(False)
        self.tableWidget_3.horizontalHeader().setSortIndicatorShown(False)
        self.tableWidget_3.horizontalHeader().setStretchLastSection(False)
        self.tableWidget_3.verticalHeader().setCascadingSectionResizes(False)
        self.tableWidget_3.verticalHeader().setSortIndicatorShown(False)
        self.tableWidget_3.verticalHeader().setStretchLastSection(False)
        self.gridLayout_6.addWidget(self.tableWidget_3, 0, 0, 1, 1)
        self.tableWidget_4 = QTableWidget(self.groupBox_4)
        self.tableWidget_4.setLayoutDirection(Qt.RightToLeft)
        self.tableWidget_4.setAutoFillBackground(True)
        self.tableWidget_4.setTextElideMode(Qt.ElideLeft)
        self.tableWidget_4.setObjectName("tableWidget_4")
        self.tableWidget_4.setColumnCount(3)
        self.tableWidget_4.setRowCount(0)
        item = QTableWidgetItem()
        self.tableWidget_4.setHorizontalHeaderItem(0, item)
        item = QTableWidgetItem()
        self.tableWidget_4.setHorizontalHeaderItem(1, item)
        item = QTableWidgetItem()
        self.tableWidget_4.setHorizontalHeaderItem(2, item)
        self.gridLayout_6.addWidget(self.tableWidget_4, 0, 1, 1, 1)
        self.groupBox_3 = QGroupBox(self.splitter_3)
        self.groupBox_3.setMaximumSize(QSize(16777215, 100))
        self.groupBox_3.setAutoFillBackground(True)
        self.groupBox_3.setTitle("")
        self.groupBox_3.setObjectName("groupBox_3")
        self.horizontalLayout = QHBoxLayout(self.groupBox_3)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton_13 = QPushButton(self.groupBox_3)
        self.pushButton_13.setMaximumSize(QSize(16777215, 80))
        self.pushButton_13.setAutoFillBackground(True)
        self.pushButton_13.setObjectName("pushButton_13")
        self.horizontalLayout.addWidget(self.pushButton_13)
        self.pushButton_12 = QPushButton(self.groupBox_3)
        self.pushButton_12.setMaximumSize(QSize(16777215, 80))
        self.pushButton_12.setAutoFillBackground(True)
        self.pushButton_12.setObjectName("pushButton_12")
        self.horizontalLayout.addWidget(self.pushButton_12)
        self.pushButton_11 = QPushButton(self.groupBox_3)
        self.pushButton_11.setMaximumSize(QSize(16777215, 80))
        self.pushButton_11.setAutoFillBackground(True)
        self.pushButton_11.setObjectName("pushButton_11")
        self.horizontalLayout.addWidget(self.pushButton_11)
        self.pushButton_9 = QPushButton(self.groupBox_3)
        self.pushButton_9.setMaximumSize(QSize(16777215, 80))
        self.pushButton_9.setAutoFillBackground(True)
        self.pushButton_9.setObjectName("pushButton_9")
        self.horizontalLayout.addWidget(self.pushButton_9)
        self.toolButton = QToolButton(self.groupBox_3)
        self.toolButton.setMaximumSize(QSize(16777215, 80))
        self.toolButton.setAutoFillBackground(True)
        self.toolButton.setObjectName("toolButton")
        self.horizontalLayout.addWidget(self.toolButton)
        self.pushButton_10 = QPushButton(self.groupBox_3)
        self.pushButton_10.setMaximumSize(QSize(16777215, 80))
        self.pushButton_10.setAutoFillBackground(True)
        self.pushButton_10.setObjectName("pushButton_10")
        self.horizontalLayout.addWidget(self.pushButton_10)
        self.gridLayout_4.addWidget(self.splitter_3, 1, 0, 1, 2)
        self.tabWidget.addTab(self.Manage_Opc_Product, "")
        self.Dispaly_Visio = QWidget()
        self.Dispaly_Visio.setObjectName("Dispaly_Visio")
        self.groupBox_5 = QGroupBox(self.Dispaly_Visio)
        self.groupBox_5.setGeometry(QRect(10, 10, 1281, 721))
        self.groupBox_5.setAutoFillBackground(True)
        self.groupBox_5.setTitle("")
        self.groupBox_5.setObjectName("groupBox_5")
        self.tabWidget.addTab(self.Dispaly_Visio, "")
        self.gridLayout.addWidget(self.tabWidget, 0, 0, 2, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QMenuBar(MainWindow)
        self.menubar.setGeometry(QRect(0, 0, 1278, 21))
        palette = QPalette()
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.BrightText, brush)
        brush = QBrush(QColor(179, 225, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Highlight, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.HighlightedText, brush)
        brush = QBrush(QColor(199, 255, 254))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Link, brush)
        brush = QBrush(QColor(214, 246, 237))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.AlternateBase, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.BrightText, brush)
        brush = QBrush(QColor(179, 225, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Highlight, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.HighlightedText, brush)
        brush = QBrush(QColor(199, 255, 254))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Link, brush)
        brush = QBrush(QColor(214, 246, 237))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.AlternateBase, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.BrightText, brush)
        brush = QBrush(QColor(0, 120, 215))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Highlight, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.HighlightedText, brush)
        brush = QBrush(QColor(199, 255, 254))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Link, brush)
        brush = QBrush(QColor(214, 246, 237))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.AlternateBase, brush)
        self.menubar.setPalette(palette)
        self.menubar.setObjectName("menubar")
        self.menuFile = QMenu(self.menubar)
        palette = QPalette()
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.BrightText, brush)
        brush = QBrush(QColor(192, 237, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Highlight, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.HighlightedText, brush)
        brush = QBrush(QColor(207, 240, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Link, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.BrightText, brush)
        brush = QBrush(QColor(192, 237, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Highlight, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.HighlightedText, brush)
        brush = QBrush(QColor(207, 240, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Link, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.BrightText, brush)
        brush = QBrush(QColor(51, 153, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Highlight, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.HighlightedText, brush)
        brush = QBrush(QColor(207, 240, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Link, brush)
        self.menuFile.setPalette(palette)
        self.menuFile.setObjectName("menuFile")
        self.menuOPC = QMenu(self.menubar)
        self.menuOPC.setObjectName("menuOPC")
        self.menuSetting = QMenu(self.menubar)
        palette = QPalette()
        brush = QBrush(QColor(190, 244, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Highlight, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.HighlightedText, brush)
        brush = QBrush(QColor(189, 255, 248))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Active, QPalette.Link, brush)
        brush = QBrush(QColor(190, 244, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Highlight, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.HighlightedText, brush)
        brush = QBrush(QColor(189, 255, 248))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Inactive, QPalette.Link, brush)
        brush = QBrush(QColor(51, 153, 255))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Highlight, brush)
        brush = QBrush(QColor(0, 0, 0))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.HighlightedText, brush)
        brush = QBrush(QColor(189, 255, 248))
        brush.setStyle(Qt.SolidPattern)
        palette.setBrush(QPalette.Disabled, QPalette.Link, brush)
        self.menuSetting.setPalette(palette)
        self.menuSetting.setObjectName("menuSetting")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionNew = QAction(MainWindow)
        self.actionNew.setObjectName("actionNew")
        self.actionSave = QAction(MainWindow)
        self.actionSave.setObjectName("actionSave")
        self.actionSave_AS = QAction(MainWindow)
        self.actionSave_AS.setObjectName("actionSave_AS")
        self.actionOpen_File = QAction(MainWindow)
        self.actionOpen_File.setObjectName("actionOpen_File")
        self.actionNew_OPC = QAction(MainWindow)
        self.actionNew_OPC.setObjectName("actionNew_OPC")
        self.actionOpen_File_Visio = QAction(MainWindow)
        self.actionOpen_File_Visio.setObjectName("actionOpen_File_Visio")
        self.actionNetwork_Setting = QAction(MainWindow)
        self.actionNetwork_Setting.setObjectName("actionNetwork_Setting")
        self.actionExit = QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.menuFile.addAction(self.actionNew)
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionSave_AS)
        self.menuFile.addAction(self.actionOpen_File)
        self.menuFile.addAction(self.actionOpen_File_Visio)
        self.menuFile.addAction(self.actionExit)
        self.menuSetting.addAction(self.actionNetwork_Setting)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuOPC.menuAction())
        self.menubar.addAction(self.menuSetting.menuAction())

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QMetaObject.connectSlotsByName(MainWindow)

        
    

    def retranslateUi(self, MainWindow):
        _translate = QCoreApplication.translate
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "شماره ایستگاه"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "ID پرسنل "))
        self.label_2.setText(_translate("MainWindow", "کد سفارش را وارد کنید "))
        self.label.setText(_translate("MainWindow", "کد محصول را وارد کنید "))
        item = self.tableWidget_2.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "مراحل ساخت "))
        item = self.tableWidget_2.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "شماره ایستگاه"))
        item = self.tableWidget_2.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "شماره پرسنل "))
        self.pushButton_4.setText(_translate("MainWindow", "SAVE"))
        self.pushButton_start.setText(_translate("MainWindow", "START"))
        self.pushButton_5.setText(_translate("MainWindow", "Delete"))
        self.pushButton_read.setText(_translate("MainWindow", "خواندن منابع "))
        self.pushButton_stop.setText(_translate("MainWindow", "STOP"))
        self.pushButton_start_3.setText(_translate("MainWindow", "START"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Admin_Page), _translate("MainWindow", "Tab 1"))
        self.label_4.setText(_translate("MainWindow", "  کد محصول "))
        item = self.tableWidget_3.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "مراحل ساخت "))
        item = self.tableWidget_3.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "شماره ایستگاه "))
        item = self.tableWidget_3.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "شماره پرسنل "))
        item = self.tableWidget_4.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "کد محصول "))
        item = self.tableWidget_4.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "شرح محصول"))
        item = self.tableWidget_4.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "کد ردیابی"))
        self.pushButton_13.setText(_translate("MainWindow", "پاک کردن ردیف"))
        self.pushButton_12.setText(_translate("MainWindow", "اضافه کردن ردیف "))
        self.pushButton_11.setText(_translate("MainWindow", "اضافه کردن ستون "))
        self.pushButton_9.setText(_translate("MainWindow", "ثبت OPC"))
        self.toolButton.setText(_translate("MainWindow", "بارگزاری تصویر "))
        self.pushButton_10.setText(_translate("MainWindow", "پاک کردن اطلاعات"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Manage_Opc_Product), _translate("MainWindow", "Tab 2"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Dispaly_Visio), _translate("MainWindow", "Page"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuOPC.setTitle(_translate("MainWindow", "OPC"))
        self.menuSetting.setTitle(_translate("MainWindow", "Setting"))
        self.actionNew.setText(_translate("MainWindow", "New"))
        self.actionSave.setText(_translate("MainWindow", "Save"))
        self.actionSave_AS.setText(_translate("MainWindow", "Save AS"))
        self.actionOpen_File.setText(_translate("MainWindow", "Open File_excel"))
        self.actionNew_OPC.setText(_translate("MainWindow", "New OPC"))
        self.actionOpen_File_Visio.setText(_translate("MainWindow", "Open_File_Visio"))
        self.actionNetwork_Setting.setText(_translate("MainWindow", "Network_Setting"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))

        ###### Call All StyleSheet
        self.tabWidget.setStyleSheet(Style())
        self.groupBox.setStyleSheet(Style())
        self.tableWidget.setStyleSheet(Style())
        self.tableWidget_2.setStyleSheet(Style())
        self.tableWidget_3.setStyleSheet(Style())
        self.pushButton_4.setStyleSheet(Style())
        self.pushButton_5.setStyleSheet(Style())
        self.pushButton_start.setStyleSheet(Style())
        self.pushButton_start_3.setStyleSheet(Style())
        self.pushButton_read.setStyleSheet(Style())
        self.pushButton_stop.setStyleSheet(Style())
        self.pushButton_stop.setStyleSheet(Style())

        self.pushButton_9.setStyleSheet(Style())
        self.pushButton_10.setStyleSheet(Style_Red())
        self.pushButton_11.setStyleSheet(Style())
        self.pushButton_12.setStyleSheet(Style())
        self.pushButton_13.setStyleSheet(Style())
        self.toolButton.setStyleSheet(Style())

        self.lineEdit.setStyleSheet(Style())
        self.lineEdit_2.setStyleSheet(Style())
        MainWindow.setStyleSheet(Style())

        ########################## Calling Function
        self.toolButton.clicked.connect(self.Read_Product_Item_from_Sepidar)

        self.pushButton_4.clicked.connect(self.Save_SQL_opc)
        self.pushButton_5.clicked.connect(self.Delete_Value)
        self.pushButton_9.clicked.connect(self.Display_opc_list)

        self.pushButton_10.clicked.connect(self.Delete_opc)
        # self.pushButton_11.clicked.connect(self.Delete_opc)
        self.pushButton_12.clicked.connect(self.AddRow)
        self.pushButton_13.clicked.connect(self.RemoveRow)
        # self.pushButton_11.clicked.connect(self.Read_File)
        self.actionOpen_File.triggered.connect(self.Read_File)
        self.lineEdit_2.textEdited.connect(self.Search_Code_Product)
        self.pushButton_read.clicked.connect(self.read_resourses)
        self.actionExit.triggered.connect(MainWindow.close)
        ##Search Code Product From Database Sepidar

    def Search_Code_Product(self):
        self.tableWidget_4.setRowCount(0)
        self.tableWidget_4.clear()
        self.tableWidget_4.clearContents()
        if len(self.lineEdit_2.text()) > 3:
            Cursor = MssqlConnection.cnxn_2.cursor()
            Cursor.execute(f"SELECT  Code,Title FROM INV.Item  WHERE Code  like  '{self.lineEdit_2.text()}%';")
            Prosuct_item = Cursor.fetchall()

            for row_number, row_data in enumerate(Prosuct_item):
                self.tableWidget_4.insertRow(row_number)

                for column_number, data in enumerate(row_data):
                    self.tableWidget_4.setItem(row_number, column_number, QTableWidgetItem(str(data)))
        ## Reac Product Item From Database Sepidar And Save to DataBase Tracebility

    def Read_Product_Item_from_Sepidar(self):
        DB_save_server = Connect_To_server.DB_save
        MY_curser = MssqlConnection.cnxn_2.cursor()
        MyCursor_server = Connect_To_server.DB_save.cursor()
        MY_curser.execute("SELECT  Code,Title FROM INV.Item;")
        all_product = MY_curser.fetchall()

        #
        # Q_Select = " select CodProduct from  Product"
        # MyCursor_server.execute(Q_Select)
        # Q_Product_code = MyCursor_server.fetchall()
        #

        for i in enumerate(all_product):
            sql = f"INSERT INTO  Product(Name_product, CodProduct, Discription, orgpro, CodTracebility) VALUES (%s, %s, %s, %s, %s)"
            # f" where not EXISTS(select * from Product where  CodProduct= {i[1][1]})"

            val = (f"null", i[1][0], f"{i[1][1]}", f"null", f"{1}")
            MyCursor_server.execute(sql, val)
        DB_save_server.commit()
        ## Append Column To Widget Opc

    def AddColumn(self):
        self.count_del = 0
        self.count = 0
        self.col_add = self.tableWidget_3.columnCount()

        self.tableWidget_3.insertColumn(self.col_add)
        self.count + 1
        self.count_del + 1
        ## Remove Column From Widget Opc

    def RemoveColumn(self):
        try:
            self.col_del = self.tableWidget_3.rowCount()

            self.tableWidget_3.removeColumn(self.count_del)
            self.count - 1
        except:
            msg = QMessageBox()
            msg.setText("ستونی برای پاک کردن نیست ")
            msg.setWindowTitle("خطا")
            msg.exec_()
        ## Add Row to widget Opc

    def AddRow(self):
        self.count_row = 0
        self.count = 0
        self.row_add = self.tableWidget_3.rowCount()

        self.tableWidget_3.insertRow(self.row_add)
        self.count + 1
        self.count_row + 1
        ## Remove row  from  Widget Opc

    def RemoveRow(self):
        try:
            self.row_del = self.tableWidget_3.rowCount()
            # self.tableWidget_3.removeRow(MYROW)
            self.tableWidget_3.removeRow(self.count_row)
            self.count - 1
        except:
            msg = QMessageBox()
            # msg.setIcon(QMessageBox.warning)
            # msg.setStyle("fusion")
            msg.setText("ردیفی  برای پاک کردن نیست ")
            # msg.setInformativeText('More information')
            msg.setWindowTitle("خطا")
            msg.exec_()
        ## Get Opc List from  table opc_list and show data to table opc managment

    def Display_opc_list(self):
        try:

            model = self.tableWidget_3.model()
            self.data_SQL_opc_show = []

            for row in range(model.rowCount()):
                self.data_SQL_opc_show.append([])
                for column in range(model.columnCount()):
                    index = model.index(row, column)
                    self.data_SQL_opc_show[row].append(model.data(index))
            numrows = len(self.data_SQL_opc_show)
            numcols = len(self.data_SQL_opc_show[0])

        except:
            msg = QMessageBox()
            # msg.setIcon(QMessageBox.warning)
            # msg.setStyle("fusion")
            msg.setText("دیتای در جدول نیست")
            # msg.setInformativeText('More information')
            msg.setWindowTitle("خطا")
            msg.exec_()
        try:

            self.tableWidget_2.setColumnCount(numcols)
            self.tableWidget_2.setRowCount(numrows)
            for row in range(numrows):
                for column in range(numcols):

                    if (self.data_SQL_opc_show[row][column]):
                        self.tableWidget_2.setItem(row, column,
                                                   QTableWidgetItem((self.data_SQL_opc_show[row][column])))
                    else:
                        self.tableWidget_2.setItem(row, column, QTableWidgetItem((self.data_SQL_opc_show[row][column])))
        except:
            msg = QMessageBox()
            # msg.setIcon(QMessageBox.warning)
            # msg.setStyle("fusion")
            msg.setText("عملیات نشان دادن دیتا در جدول  با موفقیت انجام نشد")
            # msg.setInformativeText('More information')
            msg.setWindowTitle("خطا")
            msg.exec_()
        ##read excel  file Opc from dialog Operator

    def Read_File(self):
        try:
            File = QFileDialog.getOpenFileName()
            File_path = File[0]

            #################################################################
            read_file = open(File_path, "r")
            Data_file = pd.read_excel(File_path)
            df = pd.DataFrame(Data_file, columns=['مراحل ساخت', 'ایستگاه کاری', 'پرسنل'])
            df_values = df.values.tolist()
            numrows = len(df_values)
            numcols = len(df_values[0])

        except:
            msg = QMessageBox()

            msg.setText("فایل انتخاب نشد")

            msg.setWindowTitle("خطا")
            msg.exec_()
        try:

            self.tableWidget_3.setColumnCount(numcols)
            self.tableWidget_3.setRowCount(numrows)
            for row in range(numrows):
                for column in range(numcols):

                    if (df_values[row][column]):
                        self.tableWidget_3.setItem(row, column,
                                                   QTableWidgetItem((f"{df_values[row][column]}")))

            csv_data = Data_file.to_excel
        except:
            msg = QMessageBox()

            msg.setText("فایل نمایش داده نشد ")
            # msg.setInformativeText('More information')
            msg.setWindowTitle("خطا")
            msg.exec_()

    def Save_SQL_opc(self):
        DB_save = Connect_To_server.DB_save

        MyCursor = Connect_To_server.DB_save.cursor()
        # try:
        model = self.tableWidget_2.model()
        self.data_SQL_opc = []
        ## Get CodeProduct From Related data save to DataBase
        MyCursor.execute(f" SELECT code_Product  FROM Opc_Product  WHERE code_Product='{self.lineEdit.text()}' ")
        codeproduct = MyCursor.fetchall()

        for row in range(model.rowCount()):
            self.data_SQL_opc.append([])
            for column in range(model.columnCount()):
                index = model.index(row, column)
                self.data_SQL_opc[row].append(model.data(index))
        len_data_sql_opc = 0
        len_data_sql_opc = len(self.data_SQL_opc)

        roww = 0
        self.Station_number = 0
        self.Operator_Code = 0

        # for row in enumerate(self.data_SQL_opc):
        #     self.Order_Opc = str(self.data_SQL_opc[roww][0])
        #
        #
        #     self.Station_number = str(self.data_SQL_opc[roww][1])
        #     self.Operator_Code = str(self.data_SQL_opc[roww][2])
        #     roww += 1
        #     if roww > len_data_sql_opc:
        #         break
        #

        qet_ref_product_id = f"SELECT Product_id FROM Products WHERE CodProduct='{str(self.lineEdit.text())}' "
        MyCursor.execute(qet_ref_product_id)
        product_id_ref = MyCursor.fetchall()

        #         #####
        #         ####Inserte Data with loop
        #         #
        if codeproduct != []:
            sql_delete = f" DELETE FROM Opc_Product   where   code_Product='{self.lineEdit.text()}';"

            MyCursor.execute(sql_delete)
            DB_save.commit()
            sql = "INSERT INTO  Opc_Product (P_id, code_Product,  Opc_Order, Order_code_Product) " \
                  " VALUES ( %s, %s, %s, %s)  "

            val = (f"{int(product_id_ref[0][0])}", f"{int(self.lineEdit.text())}", f"{str(self.data_SQL_opc)}",
                   f"{str(self.lineEdit_3.text())}")
            MyCursor.execute(sql, val)
            DB_save.commit()

            print('update')
            msg.setText("عملیات اپدیت  در دیتا بیس  انجام شد ")
            # msg.setInformativeText('More information')
            msg.setWindowTitle("موفق")
            msg.exec_()
            print('insert')
        else:
            sql = "INSERT INTO  Opc_Product (P_id, code_Product,  Opc_Order,  Order_code_Product) " \
                  " VALUES ( %s, %s, %s, %s )  "
            try:
                val = (f"{int(product_id_ref[0][0])}", f"{int(self.lineEdit.text())}", f"{str(self.data_SQL_opc)}",
                       f"{str(self.lineEdit_3.text())}")
                MyCursor.execute(sql, val)
                DB_save.commit()
                msg = QMessageBox()

                msg.setText("عملیات ذخیره در دیتا بیس  انجام شد ")
                # msg.setInformativeText('More information')
                msg.setWindowTitle("موفق")
                msg.exec_()
                print('insert')

            except:
                msg = QMessageBox()

                msg.setText("احتمالا کد محصول وارد شده اشتباه است ")
                # msg.setInformativeText('More information')
                msg.setWindowTitle("خطا")
                msg.exec_()

        #
        #
        #
        # except:
        #     msg = QMessageBox()
        #     # msg.setIcon(QMessageBox.warning)
        #     # msg.setStyle("fusion")
        #     msg.setText("دیتای برای ثبت نیست")
        #     # msg.setInformativeText('More information')
        #     msg.setWindowTitle("خطا")
        #     msg.exec_()

    def Delete_opc(self):
        msg_Q = QMessageBox()
        msg_Q.setIcon(QMessageBox.Information)
        msg_Q.setText("برای پاک کردن اطلاعات   لطفا تایید کنید ")

        msg_Q.setWindowTitle("Delete dialog")
        msg_Q.setDetailedText("مقادیری که در فرم میباشد پاک میشود ")
        msg_Q.addButton(QMessageBox.Yes).setText('Opc')
        msg_Q.addButton(QMessageBox.Ok).setText('Product')
        msg_Q.addButton(QMessageBox.No)
        msg_Q.setDefaultButton(QMessageBox.Yes)
        return_value = msg_Q.exec_()
        if return_value == QMessageBox.Yes:
            self.tableWidget_3.clearContents()
            self.tableWidget_3.setRowCount(0)
        elif return_value == QMessageBox.Ok:
            self.tableWidget_4.clearContents()
            self.tableWidget_4.setRowCount(0)

    def Delete_Value(self):
        msg_Q = QMessageBox()
        msg_Q.setIcon(QMessageBox.Information)
        msg_Q.setText("برای پاک کردن اطلاعات   لطفا تایید کنید ")

        msg_Q.setWindowTitle("Delete dialog")
        msg_Q.setDetailedText("مقادیری که در فرم میباشد پاک میشود")
        msg_Q.addButton(QMessageBox.Yes).setText('Opc')
        msg_Q.addButton(QMessageBox.Ok).setText('resources')
        msg_Q.addButton(QMessageBox.No)
        msg_Q.setDefaultButton(QMessageBox.Yes)
        return_value = msg_Q.exec_()
        if return_value == QMessageBox.Yes:
            self.tableWidget_2.clearContents()
            self.tableWidget_2.setRowCount(0)
        elif return_value == QMessageBox.Ok:
            self.tableWidget.clearContents()
            self.tableWidget.setRowCount(0)

    def read_resourses(self):
        DB = Connect_To_server.DB_save

        Mycursor = Connect_To_server.DB_save.cursor()
        Mycursor.execute("select  Device_Station,  Operator_Station from  Opc_Resours")
        live_resours = Mycursor.fetchall()

        print(live_resours[0][0])
        for row_number, row_data in enumerate(live_resours):

            self.tableWidget.insertRow(row_number)

            for column_number, data in enumerate(row_data):
                self.tableWidget.setItem(row_number, column_number, QTableWidgetItem(str(data)))

    def Save_resourses(self):
        DB = Connect_To_server.DB_save

        Mycursor = Connect_To_server.DB_save.cursor()
        Mycursor.execute(
            f"INSERT INTO `Opc_Resours`(`P_id`, `Device_Station`, `Operator_Station`) VALUES ([value-1],[value-2],[value-3])")



if __name__ == "__main__":
    import sys
    app =  QApplication(sys.argv)
    app.setStyle("fusion")
    MainWindow =  QMainWindow()

    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    # MainWindow.setStyleSheet(Style())

    ##############################################################

    Setting = Setting_server.Ui_Setting_Network()
    Setting_widget = QWidget()
    Setting.setupUi(Setting_widget)
    #
    ui.actionNetwork_Setting.triggered.connect(lambda: Setting_widget.show())

    sys.exit(app.exec_())
